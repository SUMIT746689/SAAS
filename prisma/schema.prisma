generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int                 @id @default(autoincrement())
  username     String              @unique
  password     String
  /// 1=superadmin, 2=admin, 3=teacher, 4=student, 5=gurdian, 6=staff, 7=accountant, 8=librarian, 9=receptionist
  user_role_id Int
  role_id      Int?
  deleted_at   DateTime?
  is_enabled   Boolean             @default(true)
  created_at   DateTime            @default(now())
  updated_at   DateTime            @updatedAt
  user_photo   String?
  school_id    Int?
  teacher      Teacher?
  school       School?             @relation("AdminUserSchool", fields: [school_id], references: [id])
  user_role    Role                @relation("userRoleWithRole", fields: [user_role_id], references: [id])
  role         Role?               @relation(fields: [role_id], references: [id])
  permissions  Permission[]        @relation("PermissionToUser")
  student      StudentInformation?

  // admin_school School? @relation(name: "AdminUserSchool")
  EmployeeAttendance   EmployeeAttendance[]
  StudentFee           StudentFee[]
  Leave                Leave[]
  tbl_attendence_queue tbl_attendance_queue[]
  // tbl_manual_attendace_queue tbl_manual_attendace_queue[]
  approved_user        Leave[]                @relation("approved_by")
  banners              Banners[]
  Subscription_history Subscription_history[]

  @@map("users")
}

model School {
  id                    Int     @id @default(autoincrement())
  name                  String
  address               String
  phone                 String
  email                 String
  domain                String? @unique
  currency              String?
  main_balance          Float?
  masking_sms_count     Int     @default(0) //no_of_sms_available
  non_masking_sms_count Int     @default(0) //no_of_sms_available
  masking_sms_price     Float?
  non_masking_sms_price Float?
  // school should not be created without an existing user
  // admin_id Int     @unique
  // sms_balance           Int? //no_of_sms
  // sms      Json?

  // admin          User                 @relation(fields: [admin_id], references: [id], name: "AdminUserSchool")
  admins                     User[]                       @relation("AdminUserSchool")
  teachers                   Teacher[]
  classes                    Class[]
  student_list               StudentInformation[]
  rooms                      Room[]
  periods                    Period[]
  fees                       Fee[]
  exams                      Exam[]
  holidays                   Holiday[]
  academic_years             AcademicYear[]
  attendances                Attendance[]
  subscription               Subscription[]
  websiteui                  WebsiteUi[]
  RequestPackage             RequestPackage[]
  SmsGateway                 SmsGateway[]
  SmsTemplate                SmsTemplate[]
  smsCampaign                SmsCampaigns[]
  CertificateTemplate        CertificateTemplate[]
  Transaction                Transaction[]
  GradingSystem              GradingSystem[]
  Notice                     Notice[]
  EmailTemplate              EmailTemplate[]
  OnlineAdmission            OnlineAdmission[]
  tbl_attendence_queue       tbl_attendance_queue[]
  Accounts                   Accounts[]
  Voucher                    Voucher[]
  Department                 Department[]
  TeacherRecruitment         TeacherRecruitment[]
  EmailCampaigns             EmailCampaigns[]
  tbl_student_sent_sms_queue tbl_student_sent_sms_queue[]
  RequestBuySms              RequestBuySms[]
  SmsTransaction             SmsTransaction[]
  addtionalMarkingCategories AddtionalMarkingCategories[]
  ExamTerm                   ExamTerm[]
  StudentAdmissionForm       StudentAdmissionForm?
  Package_transaction        Package_transaction[]
  Payment_gateway_credential Payment_gateway_credential[]

  // routines Routine[]
  @@map("schools")
}

model Permission {
  id    Int    @id @default(autoincrement())
  name  String
  value String
  group String
  users User[] @relation("PermissionToUser")
  roles Role[] @relation("RolesToPermissions")

  @@map("permissions")
}

model Role {
  id          Int          @id @default(autoincrement())
  title       String
  permissions Permission[] @relation("RolesToPermissions")
  User        User[]
  user_role   User[]       @relation("userRoleWithRole")
}

model Department {
  id         Int       @id @default(autoincrement())
  title      String
  school_id  Int
  deleted_at DateTime?

  teachers Teacher[]
  school   School    @relation(fields: [school_id], references: [id])

  @@map("departments")
}

model Teacher {
  id                Int       @id @default(autoincrement())
  first_name        String
  middle_name       String?
  last_name         String?
  national_id       String
  phone             String?
  email             String?
  gender            Gender
  blood_group       String?   @db.VarChar(20)
  religion          String?
  date_of_birth     DateTime  @db.Date
  present_address   String
  permanent_address String
  joining_date      DateTime  @db.Date
  resume            String
  photo             String?
  deleted_at        DateTime?

  department_id Int
  user_id       Int @unique
  school_id     Int

  my_class   Section[]  @relation("class_teacher")
  user       User       @relation(fields: [user_id], references: [id])
  classes    Section[]  @relation("SectionToTeacher")
  periods    Period[]
  school     School     @relation(fields: [school_id], references: [id])
  department Department @relation(fields: [department_id], references: [id])
  seatPlans  seatPlan[] @relation("teacher_to_seat_plan")

  @@map("teachers")
}

model Class {
  id          Int     @id @default(autoincrement())
  name        String
  code        String
  has_section Boolean @default(false)
  school_id   Int

  sections                   Section[]
  subjects                   Subject[]
  school                     School                       @relation(fields: [school_id], references: [id])
  fees                       Fee[]
  Group                      Group[]
  tbl_student_sent_sms_queue tbl_student_sent_sms_queue[]

  @@map("classes")
}

model Section {
  id               Int       @id @default(autoincrement())
  name             String?   @db.VarChar(40)
  class_id         Int
  class_teacher_id Int?
  is_class         Boolean   @default(true)
  std_entry_time   DateTime? @db.Time()
  std_exit_time    DateTime? @db.Time()

  class                      Class                        @relation(fields: [class_id], references: [id])
  class_teacher              Teacher?                     @relation("class_teacher", fields: [class_teacher_id], references: [id])
  students                   Student[]
  teachers                   Teacher[]                    @relation("SectionToTeacher")
  periods                    Period[]
  attendaces                 Attendance[]
  exams                      Exam[]
  groups                     Group[]
  tbl_student_sent_sms_queue tbl_student_sent_sms_queue[]

  @@map("sections")
}

model StudentInformation {
  id                        Int             @id @default(autoincrement())
  user_id                   Int             @unique
  first_name                String
  middle_name               String?
  last_name                 String?
  school_id                 Int
  admission_no              String?
  admission_date            DateTime
  admission_status          AdmissionStatus @default(waiting)
  date_of_birth             DateTime        @db.Date
  gender                    Gender
  blood_group               String?         @db.VarChar(20)
  religion                  String?
  phone                     String?
  email                     String?
  national_id               String?
  father_name               String?
  father_phone              String?
  father_profession         String?
  father_photo              String?
  mother_name               String?
  mother_phone              String?
  mother_profession         String?
  mother_photo              String?
  student_permanent_address String?
  previous_school           String?

  user   User   @relation(fields: [user_id], references: [id])
  school School @relation(fields: [school_id], references: [id])

  variance Student[]

  @@map("student_informations")
}

model Student {
  id                      Int                @id @default(autoincrement())
  student_information_id  Int
  section_id              Int
  group_id                Int?
  academic_year_id        Int
  class_roll_no           String
  class_registration_no   String             @unique
  student_photo           String?
  guardian_name           String?
  guardian_phone          String?
  guardian_profession     String?
  guardian_photo          String?
  relation_with_guardian  String?
  student_present_address String?
  created_at              DateTime?          @default(now())
  academic_year           AcademicYear       @relation(fields: [academic_year_id], references: [id])
  student_info            StudentInformation @relation(fields: [student_information_id], references: [id])
  section                 Section            @relation(fields: [section_id], references: [id])
  group                   Group?             @relation(fields: [group_id], references: [id])
  discount                Discount[]         @relation("DiscountToStudent")
  waiver_fees             Fee[]              @relation("WaiverFeesToStudent")

  fees        StudentFee[]
  attendances Attendance[]
  results     StudentResult[]
  Homework    Homework[]

  @@map("students")
}

enum AdmissionStatus {
  waiting
  approved
  declined
}

enum Gender {
  male
  female
}

/// StudentStatus holds student current status also history. Current status like payment info, results etc,
/// duplicate by commonly section id
// model StudentStatus {
//   id         Int @id @default(autoincrement())
//   student_id Int
//   section_id Int
//   session_id Int
//
//   student Student @relation(fields: [student_id], references: [id])
//   section Section @relation(fields: [section_id], references: [id])
//   session Session @relation(fields: [session_id], references: [id])
//
//   @@map("student_statuses")
// }

model Subject {
  id       Int    @id @default(autoincrement())
  name     String
  class_id Int
  class    Class  @relation(fields: [class_id], references: [id])

  exam_details ExamDetails[]
  Period       Period[]
  DailyNote    DailyNote[]
  Syllabus     Syllabus[]
  Homework     Homework[]

  @@map("subjects")
}

model Room {
  id         Int       @id @default(autoincrement())
  name       String
  school_id  Int
  deleted_at DateTime?

  periods     Period[]
  school      School        @relation(fields: [school_id], references: [id])
  examDetails ExamDetails[] @relation("examRoom")
  seatPlan    seatPlan[]

  @@map("rooms")
}

model Period {
  id         Int      @id @default(autoincrement())
  room_id    Int
  day        weekdays
  start_time DateTime @db.Time()
  end_time   DateTime @db.Time()
  teacher_id Int?
  section_id Int?
  school_id  Int
  subject_id Int

  subject   Subject     @relation(fields: [subject_id], references: [id])
  room      Room        @relation(fields: [room_id], references: [id])
  teacher   Teacher?    @relation(fields: [teacher_id], references: [id])
  section   Section?    @relation(fields: [section_id], references: [id])
  school    School      @relation(fields: [school_id], references: [id])
  DailyNote DailyNote[]

  // routine Routine?
  @@map("periods")
}

enum weekdays {
  Saturday
  Sunday
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
}

model Group {
  id       Int    @id @default(autoincrement())
  title    String
  class_id Int

  class    Class     @relation(fields: [class_id], references: [id])
  Section  Section[]
  students Student[]
}

// model Routine {
//   id         Int  @id @default(autoincrement())
//   period_id  Int? @unique
//   teacher_id Int
//   section_id Int
//   school_id  Int
//
//   period  Period? @relation(fields: [period_id], references: [id])
//   teacher Teacher @relation(fields: [teacher_id], references: [id])
//   section Section @relation(fields: [section_id], references: [id])
//   school  School  @relation(fields: [school_id], references: [id])
//
//   @@map("routines")
// }

// model Session {
//   id    Int    @id @default(autoincrement())
//   title String @db.VarChar(100)
//
//   fees             Fee[]
//   student_statuses StudentStatus[]
//
//   @@map("sessions")
// }

model Fee {
  id        Int      @id @default(autoincrement())
  title     String
  for       String?
  amount    Float
  last_date DateTime
  late_fee  Float?

  academic_year_id Int
  class_id         Int
  school_id        Int

  academic_year       AcademicYear @relation(fields: [academic_year_id], references: [id])
  class               Class        @relation(fields: [class_id], references: [id])
  school              School       @relation(fields: [school_id], references: [id])
  student_fees        StudentFee[]
  Discount            Discount[]
  waiverFeesToStudent Student[]    @relation("WaiverFeesToStudent")

  @@map("fees")
}

model StudentFee {
  id                Int      @id @default(autoincrement())
  student_id        Int
  fee_id            Int
  collected_amount  Float
  payment_method    String
  transID           String?
  account_id        Int?
  payment_method_id Int?
  collected_by      Int?
  created_at        DateTime @default(now())
  transaction_id    Int?     @unique
  status            String?
  total_payable     Float?

  transaction         Transaction?    @relation(fields: [transaction_id], references: [id])
  account             Accounts?       @relation(fields: [account_id], references: [id])
  payment_method_list payment_method? @relation(fields: [payment_method_id], references: [id])
  student             Student         @relation(fields: [student_id], references: [id])
  fee                 Fee             @relation(fields: [fee_id], references: [id])
  collected_by_user   User?           @relation(fields: [collected_by], references: [id])

  @@map("student_fees")
}

model Holiday {
  id        Int      @id @default(autoincrement())
  title     String
  date      DateTime @db.Date
  school_id Int
  school    School   @relation(fields: [school_id], references: [id])

  @@map("holidays")
}

model AcademicYear {
  id          Int       @id @default(autoincrement())
  title       String
  school_id   Int
  curr_active Boolean   @default(false)
  deleted_at  DateTime?

  school School @relation(fields: [school_id], references: [id])

  exams                      Exam[]
  students                   Student[]
  fees                       Fee[]
  GradingSystem              GradingSystem[]
  tbl_student_sent_sms_queue tbl_student_sent_sms_queue[]
  Syllabus                   Syllabus[]
  ExamTerm                   ExamTerm[]
  Homework                   Homework[]

  @@map("academic_years")
}

model ExamTerm {
  id               Int       @id @default(autoincrement())
  title            String
  academic_year_id Int
  school_id        Int
  deleted_at       DateTime?

  school       School       @relation(fields: [school_id], references: [id])
  academicYear AcademicYear @relation(fields: [academic_year_id], references: [id])
  Exam         Exam[]

  @@map("exam_terms")
}

model Exam {
  id               Int       @id @default(autoincrement())
  title            String
  section_id       Int
  academic_year_id Int
  school_id        Int
  final_percent    Int?
  exam_term_id     Int?
  deleted_at       DateTime?

  // class         Class        @relation(fields: [class_id], references: [id])
  section       Section      @relation(fields: [section_id], references: [id])
  academic_year AcademicYear @relation(fields: [academic_year_id], references: [id])
  school        School       @relation(fields: [school_id], references: [id])
  examTerm      ExamTerm?    @relation(fields: [exam_term_id], references: [id])

  exam_details     ExamDetails[]
  student_results  StudentResult[]
  Attendance       Attendance[]
  Syllabus         Syllabus[]
  examAddtinalMark ExamAddtionalMark[]

  @@map("exams")
}

model ExamDetails {
  id            Int      @id @default(autoincrement())
  exam_id       Int
  subject_id    Int
  subject_total Float
  exam_date     DateTime

  exam         Exam                   @relation(fields: [exam_id], references: [id])
  subject      Subject                @relation(fields: [subject_id], references: [id])
  exam_room    Room[]                 @relation("examRoom")
  participants StudentResultDetails[]
  seatPlan     seatPlan[]
  question     question[]

  @@map("exam_details")
}

model seatPlan {
  id              Int    @id @default(autoincrement())
  exam_details_id Int
  class_roll_from String
  class_roll_to   String
  student_count   Int
  room_id         Int

  room         Room        @relation(fields: [room_id], references: [id])
  exam_details ExamDetails @relation(fields: [exam_details_id], references: [id])
  teachers     Teacher[]   @relation("teacher_to_seat_plan")

  @@unique([exam_details_id, room_id])
  @@map("seat_plans")
}

model Attendance {
  id               Int              @id @default(autoincrement())
  student_id       Int
  first_name       String?
  middle_name      String?
  last_name        String?
  class_name       String?
  section_name     String?
  class_roll_no    String?
  date             DateTime
  status           AttendenceStatus
  remark           String?
  section_id       Int
  school_id        Int
  exam_id          Int?
  time_diff_in_min Int?
  entry_time       DateTime?
  exit_time        DateTime?

  student Student @relation(fields: [student_id], references: [id])
  section Section @relation(fields: [section_id], references: [id])
  school  School  @relation(fields: [school_id], references: [id])
  exam    Exam?   @relation(fields: [exam_id], references: [id])

  @@map("attendances")
}

enum AttendenceStatus {
  present
  absent
  late
  bunk
  holiday
  row_status
}

model EmployeeAttendance {
  id         Int                      @id @default(autoincrement())
  date       DateTime                 @db.Date
  status     EmployeeAttendenceStatus
  remark     String?
  school_id  Int
  user_id    Int
  entry_time DateTime?
  exit_time  DateTime?

  user User @relation(fields: [user_id], references: [id])

  @@map("employee_attendances")
}

enum EmployeeAttendenceStatus {
  present
  absent
  late
  half_holiday
  holiday
}

model StudentResult {
  id                   Int    @id @default(autoincrement())
  student_id           Int
  exam_id              Int
  total_marks_obtained Float
  calculated_grade     String
  calculated_point     Float

  student Student @relation(fields: [student_id], references: [id])
  exam    Exam    @relation(fields: [exam_id], references: [id])

  result_details                StudentResultDetails[]
  StudentAddtionalResultDetails StudentAddtionalResultDetails[]

  @@map("student_results")
}

model StudentResultDetails {
  student_result_id Int
  exam_details_id   Int
  mark_obtained     Float
  grade_id          Int

  result       StudentResult @relation(fields: [student_result_id], references: [id])
  exam_details ExamDetails   @relation(fields: [exam_details_id], references: [id])
  grade        GradingSystem @relation(fields: [grade_id], references: [id])

  @@id([student_result_id, exam_details_id])
  @@map("student_result_details")
}

model Package {
  id                  Int                   @id @default(autoincrement())
  price               Float
  duration            Int
  student_count       Int?
  is_std_cnt_wise     Boolean               @default(false)
  subscription        Subscription[]
  RequestPackage      RequestPackage[]
  Package_transaction Package_transaction[]

  @@map("packages")
}

model Package_transaction {
  id                    Int       @id @default(autoincrement())
  package_id            Int
  paymentID             String
  amount                Float
  paymentExecuteTime    DateTime?
  created_at            DateTime  @default(now())
  pay_via               String
  trxID                 String
  merchantInvoiceNumber String
  customerMsisdn        String
  school_id             Int

  school  School  @relation(fields: [school_id], references: [id])
  package Package @relation(fields: [package_id], references: [id])

  @@map("package_transaction")
}

model RequestPackage {
  id             Int                  @id @default(autoincrement())
  document_photo String
  school_id      Int
  package_id     Int
  status         RequestPakcageStatus

  school  School  @relation(fields: [school_id], references: [id])
  package Package @relation(fields: [package_id], references: [id])

  @@map("request_packages")
}

enum RequestPakcageStatus {
  pending
  approved
  declined
}

model Subscription {
  id         Int      @id @default(autoincrement())
  school_id  Int      @unique
  package_id Int
  start_date DateTime @db.Date
  end_date   DateTime @db.Date
  is_active  Boolean

  school               School                 @relation(fields: [school_id], references: [id])
  package              Package                @relation(fields: [package_id], references: [id])
  Subscription_history Subscription_history[]

  @@map("subscriptions")
}

model Subscription_history {
  id              Int      @id @default(autoincrement())
  subscription_id Int
  edited_at       DateTime @default(now())
  edited_by       Int

  user         User         @relation(fields: [edited_by], references: [id])
  subscription Subscription @relation(fields: [subscription_id], references: [id])

  @@map("subscription_history")
}

model WebsiteUi {
  id                  Int     @id @default(autoincrement())
  header_image        String
  carousel_image      Json?
  school_history      String? @db.LongText
  school_id           Int
  history_photo       String
  history_description String? @db.LongText
  chairman_photo      String
  chairman_speech     String? @db.LongText
  principal_photo     String
  principal_speech    String? @db.LongText
  eiin_number         String
  gallery             Json?
  facebook_link       String?
  youtube_link        String?
  twitter_link        String?
  google_link         String?
  linkedin_link       String?

  school School @relation(fields: [school_id], references: [id])

  @@map("website_uis")
}

model SmsTemplate {
  id         Int      @id @default(autoincrement())
  name       String
  body       String
  school_id  Int
  created_at DateTime @default(now())

  school       School         @relation(fields: [school_id], references: [id])
  smsCampaigns SmsCampaigns[]

  @@map("sms_templates")
}

model SmsGateway {
  id        Int     @id @default(autoincrement())
  title     String
  details   Json
  is_active Boolean
  school_id Int     @unique

  school       School         @relation(fields: [school_id], references: [id])
  smsCampaigns SmsCampaigns[]

  @@map("sms_gateway")
}

model SmsCampaigns {
  id              Int            @id @default(autoincrement())
  name            String
  recipient_type  RecipientType?
  recipient_count Int?
  sms_template_id Int?
  sms_gateway_id  Int
  school_id       Int
  custom_body     String?
  created_at      DateTime       @default(now())

  school      School       @relation(fields: [school_id], references: [id])
  smsTemplate SmsTemplate? @relation(fields: [sms_template_id], references: [id])
  smsGateway  SmsGateway   @relation(fields: [sms_gateway_id], references: [id])
  // smsCampaignDetails SmsCampaignDetails[]

  @@map("sms_campaings")
}

enum RecipientType {
  group
  class
  individual
}

// model SmsCampaignDetails {
//   id            Int        @id @default(autoincrement())
//   name          String
//   campaign_name String
//   body          String
//   phone         String
//   status        SentStatus @default(pending)
//   api_key       String
//   sender_id     String
//   user_id       Int
//   school_id     Int
//   campaign_id   Int
//   created_at    DateTime   @default(now())

//   school      School       @relation(fields: [school_id], references: [id])
//   smsCampaign SmsCampaigns @relation(fields: [campaign_id], references: [id])
//   user        User         @relation(fields: [user_id], references: [id])

//   @@map("sms_campaign_details")
// }

enum SentStatus {
  pending
  success
  failed
}

model EmailTemplate {
  id         Int      @id @default(autoincrement())
  name       String
  body       String
  school_id  Int
  created_at DateTime @default(now())

  school         School           @relation(fields: [school_id], references: [id])
  emailCampaigns EmailCampaigns[]

  @@map("email_templates")
}

model EmailCampaigns {
  id                Int            @id @default(autoincrement())
  name              String
  recipient_type    RecipientType?
  recipient_count   Int?
  email_template_id Int?
  subject           String
  school_id         Int
  custom_body       String?
  created_at        DateTime       @default(now())

  school        School         @relation(fields: [school_id], references: [id])
  emailTemplate EmailTemplate? @relation(fields: [email_template_id], references: [id])

  @@map("email_campaigns")
}

// model EmailCampaignDetails {
//   id          Int        @id @default(autoincrement())
//   campaign_id Int
//   name        String
//   phone       String
//   user_id     Int
//   status      SentStatus
//   created_at  DateTime   @default(now())

//   emailCampaign EmailCampaigns @relation(fields: [campaign_id], references: [id])
//   user          User           @relation(fields: [user_id], references: [id])
//   School        School?        @relation(fields: [schoolId], references: [id])
//   schoolId      Int?

//   @@map("email_campaign_details")
// }

model CertificateTemplate {
  id               Int         @id @default(autoincrement())
  name             String
  user_type        UserType
  page_layout      PageLayouts
  student_qr_code  String?
  employee_qr_code String?
  photo_style      PhotoStyle
  photo_size       Float
  top_space        Float
  bottom_space     Float
  right_space      Float
  left_space       Float
  signature_url    String
  logo_url         String
  background_url   String
  content          Json
  school_id        Int
  created_at       DateTime    @default(now())

  school School @relation(fields: [school_id], references: [id])

  @@map("certificate_templates")
}

enum UserType {
  student
  employee
}

enum PageLayouts {
  a4_potrait
  a4_landscape
}

enum PhotoStyle {
  circular
  rounded
  square
}

model GradingSystem {
  id               Int       @id @default(autoincrement())
  lower_mark       Float
  upper_mark       Float
  point            Float?
  grade            String?
  school_id        Int
  academic_year_id Int
  deleted_at       DateTime?

  school                        School                          @relation(fields: [school_id], references: [id])
  academic_year                 AcademicYear                    @relation(fields: [academic_year_id], references: [id])
  StudentResultDetails          StudentResultDetails[]
  StudentAddtionalResultDetails StudentAddtionalResultDetails[]

  @@map("grade_systems")
}

model Voucher {
  id            Int             @id @default(autoincrement())
  title         String
  description   String
  amount        Float?
  reference     String
  type          TransactionType
  resource_id   Int?
  resource_type String?
  school_id     Int?
  created_at    DateTime        @default(now())

  school      School?       @relation(fields: [school_id], references: [id])
  Transaction Transaction[]

  @@map("vouchers")
}

enum TransactionType {
  debit
  credit
}

model payment_method {
  id         Int    @id @default(autoincrement())
  title      String
  account_id Int

  account     Accounts      @relation(fields: [account_id], references: [id])
  Transaction Transaction[]
  StudentFee  StudentFee[]
}

model Accounts {
  id                         Int                          @id @default(autoincrement())
  title                      String
  created_at                 DateTime                     @default(now())
  account_number             String
  description                String                       @db.Text
  balance                    Float
  school_id                  Int
  school                     School                       @relation(fields: [school_id], references: [id])
  Transaction                Transaction[]
  payment_method             payment_method[]
  StudentFee                 StudentFee[]
  Payment_gateway_credential Payment_gateway_credential[]

  @@unique([school_id, title])
  @@map("accounts")
}

model Transaction {
  id                Int     @id @default(autoincrement())
  amount            Float
  transID           String?
  voucher_id        Int
  account_id        Int?
  payment_method_id Int?
  school_id         Int
  tracking_number   String?

  account_name    String?
  acccount_number String?
  payment_method  String?
  voucher_name    String?
  voucher_type    String?
  voucher_amount  Float?

  Ref         String?
  attachment  String?
  description String?
  created_at  DateTime @default(now())

  voucher             Voucher         @relation(fields: [voucher_id], references: [id])
  account             Accounts?       @relation(fields: [account_id], references: [id])
  payment_method_list payment_method? @relation(fields: [payment_method_id], references: [id])
  school              School          @relation(fields: [school_id], references: [id])
  StudentFee          StudentFee?

  @@unique([tracking_number, school_id])
  @@map("transactions")
}

model Notice {
  id         Int      @id @default(autoincrement())
  title      String
  headLine   String   @db.MediumText
  file_url   String
  school_id  Int
  created_at DateTime @default(now())

  school School @relation(fields: [school_id], references: [id])

  @@map("notices")
}

model Leave {
  id             Int         @id @default(autoincrement())
  user_id        Int
  from_date      DateTime
  to_date        DateTime
  created_at     DateTime    @default(now())
  status         LeaveStatus
  Leave_type     Leave_type
  description    String?
  remarks        String?
  approved_by_id Int?

  approved_by User? @relation("approved_by", fields: [approved_by_id], references: [id])
  user        User  @relation(fields: [user_id], references: [id])
}

enum LeaveStatus {
  pending
  approved
  declined
}

enum Leave_type {
  sick
  casual
  maternity
}

model OnlineAdmission {
  id        Int    @id @default(autoincrement())
  student   Json
  school_id Int
  school    School @relation(fields: [school_id], references: [id])
}

model TeacherRecruitment {
  id        Int    @id @default(autoincrement())
  teacher   Json
  school_id Int
  school    School @relation(fields: [school_id], references: [id])

  @@map("TeacherRecruitment")
}

model Discount {
  id      Int          @id @default(autoincrement())
  title   String
  fee_id  Int
  type    DiscountType
  amt     Float
  fee     Fee          @relation(fields: [fee_id], references: [id])
  student Student[]    @relation("DiscountToStudent")
}

enum DiscountType {
  percent
  flat
}

// model tbl_manual_attendace_queue {
//   id         Int      @id @default(autoincrement())
//   user_id    Int
//   created_at DateTime @default(now())

//   user User @relation(fields: [user_id], references: [id])
// }

// model tbl_sms_queued {
//   id            Int      @id @default(autoincrement())
//   name          String
//   campaign_name String
//   body          String
//   phone         String
//   sender_id     String
//   api_key       String
//   user_id       Int
//   school_id     Int
//   created_at    DateTime @default(now())

//   school School @relation(fields: [school_id], references: [id])
//   user   User   @relation(fields: [user_id], references: [id])

//   @@map("tbl_sms_queued")
// }

model tbl_student_sent_sms_queue {
  id               Int      @id @default(autoincrement())
  class_id         Int
  section_id       Int?
  school_id        Int
  academic_year_id Int
  created_at       DateTime @default(now())

  class        Class        @relation(fields: [class_id], references: [id])
  sections     Section?     @relation(fields: [section_id], references: [id])
  school       School       @relation(fields: [school_id], references: [id])
  academicYear AcademicYear @relation(fields: [academic_year_id], references: [id])

  @@map("tbl_student_sent_sms_queue")
}

model tbl_attendance_queue {
  id              Int      @id @default(autoincrement())
  school_id       Int
  machine_id      String
  user_id         Int
  status          Int
  submission_time DateTime

  school School @relation(fields: [school_id], references: [id])
  user   User   @relation(fields: [user_id], references: [id])

  @@map("tbl_attendance_queue")
}

model tbl_queued_sms {
  id                  Int       @id @default(autoincrement())
  sms_shoot_id        String // school_id-user_id-dateTime
  school_id           Int
  school_name         String
  user_id             Int
  user_name           String?
  sender_id           String
  sender_name         String?
  contacts            String    @db.LongText
  pushed_via          String
  charges_per_sms     Float     @default(0)
  number_of_sms_parts Int       @default(1)
  total_count         Int
  sms_type            String
  sms_text            String    @db.Text
  submission_time     DateTime?
  status              Int       @default(0) // 0-> new, 1-> paush, 2-> processing, 3-> fails
  sms_gateway_status  String?
  // fail_count          Int       @default(0)
  // priority            Int       @default(5) // 1-> highest
  //campaign_id           Int?
  //route_id              Int
  //route_name            String?
  //coverage_id           Int
  //coverage_network_name String?
  //is_dlr_requested      Int       @default(0)
  //is_black_list         Int       @default(0)

  @@unique([id, status])
  @@map("tbl_queued_sms")
}

model tbl_sent_sms {
  id                  Int       @id @default(autoincrement())
  sms_shoot_id        String // school_id-user_id-dateTime
  school_id           Int
  school_name         String
  user_id             Int
  user_name           String?
  sender_id           String
  sender_name         String?
  contacts            String    @db.LongText
  pushed_via          String
  charges_per_sms     Float     @default(0)
  number_of_sms_parts Int       @default(1)
  total_count         Int
  sms_type            String
  sms_text            String    @db.Text
  submission_time     DateTime?
  status              Int       @default(0) // 0-> new, 1-> paush, 2-> processing, 3-> fails
  sms_gateway_status  String?
  // fail_count          Int       @default(0)
  // priority            Int       @default(5) // 1-> highest
  //campaign_id           Int?
  //route_id              Int
  //route_name            String?
  //coverage_id           Int
  //coverage_network_name String?
  //is_dlr_requested      Int       @default(0)
  //is_black_list         Int       @default(0)

  @@unique([id, status])
  @@map("tbl_sent_sms")
}

model RequestBuySms {
  id                Int                  @id @default(autoincrement())
  masking_count     Int?
  non_masking_count Int?
  document_photo    String
  school_id         Int
  status            RequestPakcageStatus

  school School @relation(fields: [school_id], references: [id])

  @@map("requests_buy_sms")
}

model SmsTransaction {
  id                     Int  @id @default(autoincrement())
  masking_count          Int?
  non_masking_count      Int?
  prev_masking_count     Int
  prev_non_masking_count Int
  school_id              Int

  school School @relation(fields: [school_id], references: [id])

  @@map("sms_transactions")
}

model DailyNote {
  id         Int      @id @default(autoincrement())
  note       String   @db.LongText
  period_id  Int
  subject_id Int
  date       DateTime @db.Date
  created_at DateTime @default(now())

  period  Period  @relation(fields: [period_id], references: [id])
  subject Subject @relation(fields: [subject_id], references: [id])

  @@unique([period_id, date])
  @@map("daily_notes")
}

model Syllabus {
  id               Int @id @default(autoincrement())
  exam_id          Int
  subject_id       Int
  academic_year_id Int

  academicYear     AcademicYear       @relation(fields: [academic_year_id], references: [id])
  subject          Subject            @relation(fields: [subject_id], references: [id])
  exam             Exam               @relation(fields: [exam_id], references: [id])
  Syllabus_details Syllabus_details[]

  @@map("syllabus")
}

model Syllabus_details {
  id          Int    @id @default(autoincrement())
  syllabus_id Int
  body        String @db.MediumText

  syllabus Syllabus @relation(fields: [syllabus_id], references: [id])

  @@map("syllabus_details")
}

model question {
  id              Int         @id @default(autoincrement())
  exam_details_id Int
  content         String?     @db.LongText
  file            String?
  exam_details    ExamDetails @relation(fields: [exam_details_id], references: [id])

  @@map("question")
}

model AddtionalMarkingCategories {
  id         Int       @id @default(autoincrement())
  title      String
  school_id  Int
  created_at DateTime  @default(now())
  deleted_at DateTime?

  school            School              @relation(fields: [school_id], references: [id])
  examAddtionalMark ExamAddtionalMark[]

  @@map("addtional_marking_categories")
}

model ExamAddtionalMark {
  id                Int      @id @default(autoincrement())
  total_mark        Float
  addtional_mark_id Int
  exam_id           Int
  created_at        DateTime @default(now())
  // deleted_at        DateTime

  addtionalMarkingCategorie     AddtionalMarkingCategories      @relation(fields: [addtional_mark_id], references: [id])
  exam                          Exam                            @relation(fields: [exam_id], references: [id])
  StudentAddtionalResultDetails StudentAddtionalResultDetails[]

  @@unique([addtional_mark_id, exam_id])
  @@map("exam_addtional_marks")
}

model StudentAddtionalResultDetails {
  id                     Int               @id @default(autoincrement())
  exam_addtional_mark_id Int
  mark_obtained          Float
  grade_id               Int?
  student_result_id      Int
  created_at             DateTime          @default(now())
  exaxmAddtionalMark     ExamAddtionalMark @relation(fields: [exam_addtional_mark_id], references: [id])
  studentResult          StudentResult     @relation(fields: [student_result_id], references: [id])
  grade                  GradingSystem?    @relation(fields: [grade_id], references: [id])

  @@map("student_addtional_result_details")
}

model Homework {
  id               Int      @id @default(autoincrement())
  subject_id       Int
  student_id       Int
  date             DateTime @db.Date
  academic_year_id Int
  file_path        String

  academicYear AcademicYear @relation(fields: [academic_year_id], references: [id])
  subject      Subject      @relation(fields: [subject_id], references: [id])
  student      Student      @relation(fields: [student_id], references: [id])

  @@map("homework")
}

model session_store {
  paymentID  String   @id
  token      String   @db.MediumText
  user_id    Int
  created_at DateTime
  data       Json

  @@map("session_store")
}

model Banners {
  id      Int  @id @default(autoincrement())
  banners Json
  user_id Int

  user User @relation(fields: [user_id], references: [id])

  @@map("banners")
}

model StudentAdmissionForm {
  id        Int    @id @default(autoincrement())
  file_url  String
  school_id Int    @unique

  school School @relation(fields: [school_id], references: [id])

  @@map("student_admission_forms")
}

model Payment_gateway_credential {
  id        Int                   @id @default(autoincrement())
  title     payment_gateway_title
  details   Json
  is_active Boolean
  school_id Int
  account_id Int

  account Accounts @relation(fields: [account_id], references: [id])
  school  School   @relation(fields: [school_id], references: [id])

  @@unique([title, school_id])
  @@map("payment_gateway_credential")
}

enum payment_gateway_title {
  bkash
  nagad
  nexus
  amarPay
  surjoPay
  sslcommerz
}
