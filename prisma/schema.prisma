generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int       @id @default(autoincrement())
  username       String    @unique
  password       String
  /// 1=superadmin, 2=admin, 3=teacher, 4=student, 5=gurdian, 6=staff, 7=accountant, 8=librarian, 9=receptionist
  user_role_id   Int
  role_id        Int?
  deleted_at     DateTime?
  is_enabled     Boolean   @default(true)
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  user_photo     String?
  // domain         String?
  // copy_right_txt String?
  // logo           String?
  school_id      Int?
  admin_panel_id Int?

  teacher     Teacher?
  school      School?             @relation("AdminUserSchool", fields: [school_id], references: [id])
  user_role   Role                @relation("userRoleWithRole", fields: [user_role_id], references: [id])
  role        Role?               @relation(fields: [role_id], references: [id])
  permissions Permission[]        @relation("PermissionToUser")
  student     StudentInformation?

  // admin_school School? @relation(name: "AdminUserSchool")
  EmployeeAttendance EmployeeAttendance[]
  StudentFee         StudentFee[]

  Leave                Leave[]
  tbl_attendence_queue tbl_attendance_queue[]
  // tbl_manual_attendace_queue tbl_manual_attendace_queue[]
  approved_user        Leave[]                @relation("approved_by")
  banners              Banners[]
  Subscription_history Subscription_history[]
  OtherUsersInfo       OtherUsersInfo?
  adminPanel           AdminPanel?            @relation("admin_panel_to_users", fields: [admin_panel_id], references: [id])

  @@map("users")
}

model AdminPanel {
  id             Int     @id @default(autoincrement())
  domain         String  @unique
  logo           String?
  copy_right_txt String?
  is_active      Boolean @default(true)

  users  User[]   @relation("admin_panel_to_users")
  School School[]

  @@map("admin_panels")
}

model School {
  id                       Int     @id @default(autoincrement())
  name                     String
  address                  String
  phone                    String
  optional_phone           String?
  map_location             String?
  email                    String
  domain                   String? @unique
  currency                 String?
  main_balance             Float?
  masking_sms_count        Int     @default(0) //no_of_sms_available
  non_masking_sms_count    Int     @default(0) //no_of_sms_available
  masking_sms_price        Float?  @default(0)
  non_masking_sms_price    Float?  @default(0)
  current_academic_year_id Int?
  parent_school_id         Int?
  branch_limit             Int?

  voice_sms_balance Float @default(0)
  voice_sms_price   Float @default(0)
  voice_pulse_size  Int   @default(0)

  admin_panel_id Int?
  // school should not be created without an existing user
  // admin_id Int     @unique
  // sms_balance           Int? //no_of_sms
  // sms      Json?

  // admin          User                 @relation(fields: [admin_id], references: [id], name: "AdminUserSchool")
  admin_panel                AdminPanel?                  @relation(fields: [admin_panel_id], references: [id])
  currentAcademicYear        AcademicYear?                @relation(fields: [current_academic_year_id], references: [id])
  parent_school              School?                      @relation(name: "SchoolToBranch", fields: [parent_school_id], references: [id])
  admins                     User[]                       @relation("AdminUserSchool")
  teachers                   Teacher[]
  classes                    Class[]
  student_list               StudentInformation[]
  rooms                      Room[]
  periods                    Period[]
  fees                       Fee[]
  exams                      Exam[]
  holidays                   Holiday[]
  academic_years             AcademicYear[]               @relation("academic_year_to_school")
  attendances                Attendance[]
  subscription               Subscription[]
  websiteui                  WebsiteUi[]
  RequestPackage             RequestPackage[]
  SmsGateway                 SmsGateway[]
  SmsTemplate                SmsTemplate[]
  smsCampaign                SmsCampaigns[]
  CertificateTemplate        CertificateTemplate[]
  Transaction                Transaction[]
  GradingSystem              GradingSystem[]
  Notice                     Notice[]
  EmailTemplate              EmailTemplate[]
  OnlineAdmission            OnlineAdmission[]
  tbl_attendence_queue       tbl_attendance_queue[]
  Accounts                   Accounts[]
  Voucher                    Voucher[]
  Department                 Department[]
  TeacherRecruitment         TeacherRecruitment[]
  EmailCampaigns             EmailCampaigns[]
  tbl_student_sent_sms_queue tbl_student_sent_sms_queue[]
  RequestBuySms              RequestBuySms[]
  SmsTransaction             SmsTransaction[]
  addtionalMarkingCategories AddtionalMarkingCategories[]
  ExamTerm                   ExamTerm[]
  StudentAdmissionForm       StudentAdmissionForm?
  Package_transaction        Package_transaction[]
  Payment_gateway_credential Payment_gateway_credential[]
  AutoAttendanceSentSms      AutoAttendanceSentSms[]
  OtherUsersInfo             OtherUsersInfo[]
  VoiceGateway               VoiceGateway?
  VoiceTemplate              VoiceTemplate[]
  FeesHaed                   FeesHaed[]
  teacherSalaries            TeacherSalaryStructure[]
  // StudentClassSubjects       StudentClassSubjects[]
  smsSettings                SmsSettings?
  studentFeeWiseTeacherPay   studentFeeWiseTeacherPay[]
  websiteMenus               WebsiteMenu[]
  websiteDynamicPages        WebsiteDynamicPage[]
  Discount                   Discount[]
  Homework                   Homework[]
  School                     School[]                     @relation("SchoolToBranch")
  Program                    Program[]
  TeacherShift               TeacherShift[]

  // routines Routine[]
  @@map("schools")
}

model Permission {
  id    Int    @id @default(autoincrement())
  name  String
  value String
  group String
  users User[] @relation("PermissionToUser")
  roles Role[] @relation("RolesToPermissions")

  @@map("permissions")
}

model Role {
  id          Int          @id @default(autoincrement())
  title       String
  permissions Permission[] @relation("RolesToPermissions")
  User        User[]
  user_role   User[]       @relation("userRoleWithRole")
}

model Department {
  id         Int       @id @default(autoincrement())
  title      String
  school_id  Int
  deleted_at DateTime?

  teachers Teacher[]
  school   School    @relation(fields: [school_id], references: [id])

  @@map("departments")
}

enum SalaryEnums {
  percentage_wise
  class_wise
  monthly
}

model Teacher {
  id                Int          @id @default(autoincrement())
  first_name        String
  middle_name       String?
  last_name         String?
  national_id       String
  phone             String?
  email             String?
  gender            Gender
  blood_group       String?      @db.VarChar(20)
  religion          String?
  date_of_birth     DateTime     @db.Date
  salary_type       SalaryEnums?
  teacher_id        String?
  present_address   String
  permanent_address String
  joining_date      DateTime     @db.Date
  resume            String
  photo             String?
  deleted_at        DateTime?

  department_id Int?
  user_id       Int  @unique
  school_id     Int

  my_class                 Section[]                  @relation("class_teacher")
  user                     User                       @relation(fields: [user_id], references: [id])
  classes                  Section[]                  @relation("SectionToTeacher")
  periods                  Period[]
  school                   School                     @relation(fields: [school_id], references: [id])
  department               Department?                @relation(fields: [department_id], references: [id])
  seatPlans                seatPlan[]                 @relation("teacher_to_seat_plan")
  // StudentClassSubjects StudentClassSubjects[]
  teacherSalaries          TeacherSalaryStructure[]
  studentFeeWiseTeacherPay studentFeeWiseTeacherPay[]
  TeacherShift             TeacherShift?              @relation(fields: [teacherShiftId], references: [id])
  teacherShiftId           Int?

  @@map("teachers")
}

model Class {
  id             Int     @id @default(autoincrement())
  name           String
  code           String
  has_section    Boolean @default(false)
  school_id      Int
  is_extra       Boolean @default(false)
  scholarship_id Int?

  sections                   Section[]
  subjects                   Subject[]
  school                     School                       @relation(fields: [school_id], references: [id])
  fees                       Fee[]
  Group                      Group[]
  tbl_student_sent_sms_queue tbl_student_sent_sms_queue[]
  teacherSalaries            TeacherSalaryStructure[]
  Student                    Student[]
  Period                     Period[]
  Homework                   Homework[]
  scholarship                WebsiteUi?                   @relation(fields: [scholarship_id], references: [id])

  @@map("classes")
}

model Section {
  id               Int       @id @default(autoincrement())
  name             String?   @db.VarChar(40)
  class_id         Int
  class_teacher_id Int?
  is_class         Boolean   @default(true)
  std_entry_time   DateTime? @db.Time()
  std_late_time    DateTime? @db.Time()
  std_absence_time DateTime? @db.Time()
  std_exit_time    DateTime? @db.Time()
  updated_by       Json?     @default("{}")

  class                      Class                        @relation(fields: [class_id], references: [id])
  class_teacher              Teacher?                     @relation("class_teacher", fields: [class_teacher_id], references: [id])
  // students                   Student[]
  teachers                   Teacher[]                    @relation("SectionToTeacher")
  periods                    Period[]
  attendaces                 Attendance[]
  exams                      Exam[]
  groups                     Group[]
  tbl_student_sent_sms_queue tbl_student_sent_sms_queue[]
  extraStudents              Student[]                    @relation("extra_section")
  teacherSalaries            TeacherSalaryStructure[]
  student                    Student[]                    @relation("students_to_batches")
  Homework                   Homework[]

  @@map("sections")
}

model StudentInformation {
  id                        Int             @id @default(autoincrement())
  student_id                String?
  user_id                   Int             @unique
  first_name                String
  middle_name               String?
  last_name                 String?
  school_id                 Int
  admission_no              String?
  admission_date            DateTime
  admission_status          AdmissionStatus @default(waiting)
  date_of_birth             DateTime?       @db.Date
  gender                    Gender?
  blood_group               String?         @db.VarChar(20)
  religion                  String?
  phone                     String?
  email                     String?
  national_id               String?
  father_name               String?
  father_phone              String?
  father_profession         String?
  father_photo              String?
  father_nid                String?
  mother_name               String?
  mother_phone              String?
  mother_profession         String?
  mother_photo              String?
  mother_nid                String?
  student_permanent_address String?
  previous_school           String?
  card_no                   String?

  user   User   @relation(fields: [user_id], references: [id])
  school School @relation(fields: [school_id], references: [id])

  variance Student[]

  @@unique([student_id, school_id])
  @@map("student_informations")
}

model Student {
  id                      Int       @id @default(autoincrement())
  student_information_id  Int
  class_id                Int?
  // section_id              Int
  group_id                Int?
  academic_year_id        Int
  class_roll_no           String
  class_registration_no   String    @unique
  student_photo           String?
  guardian_name           String?
  guardian_phone          String?
  guardian_profession     String?
  guardian_photo          String?
  guardian_nid            String?
  relation_with_guardian  String?
  student_present_address String?
  extra_section_id        Int?
  created_at              DateTime? @default(now())
  is_separate             Boolean?  @default(false)
  updated_at              DateTime?

  academic_year AcademicYear       @relation(fields: [academic_year_id], references: [id])
  student_info  StudentInformation @relation(fields: [student_information_id], references: [id])
  class         Class?             @relation(fields: [class_id], references: [id])
  // section       Section            @relation(fields: [section_id], references: [id])
  group         Group?             @relation(fields: [group_id], references: [id])
  discount      Discount[]         @relation("DiscountToStudent")
  waiver_fees   Fee[]              @relation("WaiverFeesToStudent")
  extra_section Section?           @relation("extra_section", fields: [extra_section_id], references: [id])

  fees        StudentFee[]
  attendances Attendance[]
  results     StudentResult[]
  Homework    Homework[]
  subjects    Subject[]       @relation("student_subjects")
  batches     Section[]       @relation("students_to_batches")

  // StudentClassSubjects StudentClassSubjects[]

  @@map("students")
}

enum AdmissionStatus {
  waiting
  approved
  declined
}

enum Gender {
  male
  female
}

// model StudentClassSubjects {
//   id         Int @id @default(autoincrement())
//   student_id Int
//   subject_id Int
//   teacher_id Int
//   school_id  Int

//   student Student @relation(fields: [student_id], references: [id])
//   subject Subject @relation(fields: [subject_id], references: [id])
//   teacher Teacher @relation(fields: [teacher_id], references: [id])
//   school  School  @relation(fields: [school_id], references:  [id])

//   @@unique([student_id, subject_id, teacher_id])
//   @@map("std_cls_subjects")
// }

/// StudentStatus holds student current status also history. Current status like payment info, results etc,
/// duplicate by commonly section id
// model StudentStatus {
//   id         Int @id @default(autoincrement())
//   student_id Int
//   section_id Int
//   session_id Int
//
//   student Student @relation(fields: [student_id], references: [id])
//   section Section @relation(fields: [section_id], references: [id])
//   session Session @relation(fields: [session_id], references: [id])
//
//   @@map("student_statuses")
// }

model Subject {
  id       Int    @id @default(autoincrement())
  name     String
  class_id Int
  class    Class  @relation(fields: [class_id], references: [id])

  exam_details             ExamDetails[]
  Period                   Period[]
  DailyNote                DailyNote[]
  Syllabus                 Syllabus[]
  Homework                 Homework[]
  // StudentClassSubjects StudentClassSubjects[]
  fees                     Fee[]
  teacherSalaries          TeacherSalaryStructure[]
  students                 Student[]                  @relation("student_subjects")
  studentFeeWiseTeacherPay studentFeeWiseTeacherPay[]

  @@map("subjects")
}

model Room {
  id         Int       @id @default(autoincrement())
  name       String
  school_id  Int
  deleted_at DateTime?

  periods     Period[]
  school      School        @relation(fields: [school_id], references: [id])
  examDetails ExamDetails[] @relation("examRoom")
  seatPlan    seatPlan[]

  @@map("rooms")
}

model Period {
  id         Int      @id @default(autoincrement())
  class_id   Int?
  section_id Int
  teacher_id Int
  subject_id Int
  school_id  Int
  day        weekdays
  start_time String
  end_time   String
  room_id    Int?

  class     Class?      @relation(fields: [class_id], references: [id])
  section   Section     @relation(fields: [section_id], references: [id])
  teacher   Teacher?    @relation(fields: [teacher_id], references: [id])
  subject   Subject     @relation(fields: [subject_id], references: [id])
  school    School      @relation(fields: [school_id], references: [id])
  room      Room?       @relation(fields: [room_id], references: [id])
  DailyNote DailyNote[]

  // routine Routine?
  @@map("periods")
}

enum weekdays {
  Saturday
  Sunday
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
}

model Group {
  id       Int    @id @default(autoincrement())
  title    String
  class_id Int

  class    Class     @relation(fields: [class_id], references: [id])
  Section  Section[]
  students Student[]
}

// model Routine {
//   id         Int  @id @default(autoincrement())
//   period_id  Int? @unique
//   teacher_id Int
//   section_id Int
//   school_id  Int
//
//   period  Period? @relation(fields: [period_id], references: [id])
//   teacher Teacher @relation(fields: [teacher_id], references: [id])
//   section Section @relation(fields: [section_id], references: [id])
//   school  School  @relation(fields: [school_id], references: [id])
//
//   @@map("routines")
// }

// model Session {
//   id    Int    @id @default(autoincrement())
//   title String @db.VarChar(100)
//
//   fees             Fee[]
//   student_statuses StudentStatus[]
//
//   @@map("sessions")
// }

enum Frequency {
  on_demand
  half_yearly
  monthly
  annual
}

// enum  
model FeesHaed {
  id        Int       @id @default(autoincrement())
  title     String
  frequency Frequency
  school_id Int

  school School @relation(fields: [school_id], references: [id])
  Fee    Fee[]

  @@map("fees_head")
}

enum AllMonths {
  january
  february
  march
  april
  may
  june
  july
  august
  september
  october
  november
  december
}

model Fee {
  id         Int        @id @default(autoincrement())
  title      String
  for        String?
  amount     Float
  last_date  DateTime
  late_fee   Float?     @default(0)
  frequency  Frequency?
  fees_month AllMonths?

  academic_year_id Int
  class_id         Int
  subject_id       Int?
  school_id        Int
  fees_head_id     Int?
  deleted_at       DateTime?
  fees_type        String?

  academic_year       AcademicYear @relation(fields: [academic_year_id], references: [id])
  class               Class        @relation(fields: [class_id], references: [id])
  subject             Subject?     @relation(fields: [subject_id], references: [id])
  school              School       @relation(fields: [school_id], references: [id])
  fees_head           FeesHaed?    @relation(fields: [fees_head_id], references: [id])
  student_fees        StudentFee[]
  Discount            Discount[]
  waiverFeesToStudent Student[]    @relation("WaiverFeesToStudent")

  // @@unique([fees_month, fees_head_id, class_id, academic_year_id])
  @@map("fees")
}

model StudentFee {
  id                Int       @id @default(autoincrement())
  student_id        Int
  fee_id            Int?
  collected_amount  Float
  payment_method    String
  transID           String?
  account_id        Int?
  payment_method_id Int?
  collected_by      Int?
  created_at        DateTime  @default(now())
  transaction_id    Int?      @unique
  status            String?
  total_payable     Float?
  other_fee_name    String?
  collection_date   DateTime?
  on_time_discount  Int?

  transaction              Transaction?              @relation(fields: [transaction_id], references: [id])
  account                  Accounts?                 @relation(fields: [account_id], references: [id])
  payment_method_list      payment_method?           @relation(fields: [payment_method_id], references: [id])
  student                  Student                   @relation(fields: [student_id], references: [id])
  fee                      Fee?                      @relation(fields: [fee_id], references: [id])
  collected_by_user        User?                     @relation(fields: [collected_by], references: [id])
  studentFeeWiseTeacherPay studentFeeWiseTeacherPay?

  @@map("student_fees")
}

model Holiday {
  id        Int      @id @default(autoincrement())
  title     String
  date      DateTime @db.Date
  school_id Int
  school    School   @relation(fields: [school_id], references: [id])

  @@map("holidays")
}

model AcademicYear {
  id          Int       @id @default(autoincrement())
  title       String
  school_id   Int
  curr_active Boolean   @default(false)
  deleted_at  DateTime?

  school School @relation(fields: [school_id], references: [id], name: "academic_year_to_school")

  exams                      Exam[]
  students                   Student[]
  fees                       Fee[]
  GradingSystem              GradingSystem[]
  tbl_student_sent_sms_queue tbl_student_sent_sms_queue[]
  Syllabus                   Syllabus[]
  ExamTerm                   ExamTerm[]
  Homework                   Homework[]
  academicSchool             School[]

  @@map("academic_years")
}

model ExamTerm {
  id               Int       @id @default(autoincrement())
  title            String
  academic_year_id Int
  school_id        Int
  deleted_at       DateTime?

  school       School       @relation(fields: [school_id], references: [id])
  academicYear AcademicYear @relation(fields: [academic_year_id], references: [id])
  Exam         Exam[]

  @@map("exam_terms")
}

model Exam {
  id               Int       @id @default(autoincrement())
  title            String
  section_id       Int
  academic_year_id Int
  school_id        Int
  final_percent    Int?
  exam_term_id     Int?
  deleted_at       DateTime?
  // is_extra_section Boolean   @default(false)

  // class         Class        @relation(fields: [class_id], references: [id])
  section       Section      @relation(fields: [section_id], references: [id])
  academic_year AcademicYear @relation(fields: [academic_year_id], references: [id])
  school        School       @relation(fields: [school_id], references: [id])
  examTerm      ExamTerm?    @relation(fields: [exam_term_id], references: [id])

  exam_details     ExamDetails[]
  student_results  StudentResult[]
  Attendance       Attendance[]
  Syllabus         Syllabus[]
  examAddtinalMark ExamAddtionalMark[]

  @@map("exams")
}

model ExamDetails {
  id            Int      @id @default(autoincrement())
  exam_id       Int
  subject_id    Int
  subject_total Float
  exam_date     DateTime

  exam         Exam                   @relation(fields: [exam_id], references: [id])
  subject      Subject                @relation(fields: [subject_id], references: [id])
  exam_room    Room[]                 @relation("examRoom")
  participants StudentResultDetails[]
  seatPlan     seatPlan[]
  question     question[]

  @@map("exam_details")
}

model seatPlan {
  id              Int    @id @default(autoincrement())
  exam_details_id Int
  class_roll_from String
  class_roll_to   String
  student_count   Int
  room_id         Int

  room         Room        @relation(fields: [room_id], references: [id])
  exam_details ExamDetails @relation(fields: [exam_details_id], references: [id])
  teachers     Teacher[]   @relation("teacher_to_seat_plan")

  @@unique([exam_details_id, room_id])
  @@map("seat_plans")
}

model Attendance {
  id               Int              @id @default(autoincrement())
  student_id       Int
  first_name       String?
  middle_name      String?
  last_name        String?
  class_name       String?
  section_name     String?
  class_roll_no    String?
  date             DateTime
  status           AttendenceStatus
  remark           String?
  section_id       Int
  school_id        Int
  exam_id          Int?
  time_diff_in_min Int?
  entry_time       DateTime?
  exit_time        DateTime?

  student Student @relation(fields: [student_id], references: [id])
  section Section @relation(fields: [section_id], references: [id])
  school  School  @relation(fields: [school_id], references: [id])
  exam    Exam?   @relation(fields: [exam_id], references: [id])

  @@map("attendances")
}

enum AttendenceStatus {
  present
  absence
  late
  bunk
  holiday
  row_status
}

model EmployeeAttendance {
  id         Int                      @id @default(autoincrement())
  date       DateTime                 @db.Date
  status     EmployeeAttendenceStatus
  remark     String?
  school_id  Int
  user_id    Int
  entry_time DateTime?
  exit_time  DateTime?

  user User @relation(fields: [user_id], references: [id])

  @@map("employee_attendances")
}

enum EmployeeAttendenceStatus {
  present
  absent
  late
  half_holiday
  holiday
}

model StudentResult {
  id                   Int    @id @default(autoincrement())
  student_id           Int
  exam_id              Int
  total_marks_obtained Float
  calculated_grade     String
  calculated_point     Float

  student Student @relation(fields: [student_id], references: [id])
  exam    Exam    @relation(fields: [exam_id], references: [id])

  result_details                StudentResultDetails[]
  StudentAddtionalResultDetails StudentAddtionalResultDetails[]

  @@map("student_results")
}

model StudentResultDetails {
  student_result_id Int
  exam_details_id   Int
  mark_obtained     Float
  grade_id          Int

  result       StudentResult @relation(fields: [student_result_id], references: [id])
  exam_details ExamDetails   @relation(fields: [exam_details_id], references: [id])
  grade        GradingSystem @relation(fields: [grade_id], references: [id])

  @@id([student_result_id, exam_details_id])
  @@map("student_result_details")
}

model Package {
  id                  Int                   @id @default(autoincrement())
  price               Float
  duration            Int
  student_count       Int?
  is_std_cnt_wise     Boolean               @default(false)
  subscription        Subscription[]
  RequestPackage      RequestPackage[]
  Package_transaction Package_transaction[]

  @@map("packages")
}

model Package_transaction {
  id                    Int       @id @default(autoincrement())
  package_id            Int
  paymentID             String
  amount                Float
  paymentExecuteTime    DateTime?
  created_at            DateTime  @default(now())
  pay_via               String
  trxID                 String
  merchantInvoiceNumber String
  customerMsisdn        String
  school_id             Int

  school  School  @relation(fields: [school_id], references: [id])
  package Package @relation(fields: [package_id], references: [id])

  @@map("package_transaction")
}

model RequestPackage {
  id             Int                  @id @default(autoincrement())
  document_photo String
  school_id      Int
  package_id     Int
  status         RequestPakcageStatus

  school  School  @relation(fields: [school_id], references: [id])
  package Package @relation(fields: [package_id], references: [id])

  @@map("request_packages")
}

enum RequestPakcageStatus {
  pending
  approved
  declined
}

model Subscription {
  id         Int      @id @default(autoincrement())
  school_id  Int      @unique
  package_id Int
  start_date DateTime @db.Date
  end_date   DateTime @db.Date
  is_active  Boolean

  school               School                 @relation(fields: [school_id], references: [id])
  package              Package                @relation(fields: [package_id], references: [id])
  Subscription_history Subscription_history[]

  @@map("subscriptions")
}

model Subscription_history {
  id              Int      @id @default(autoincrement())
  subscription_id Int
  edited_at       DateTime @default(now())
  edited_by       Int

  user         User         @relation(fields: [edited_by], references: [id])
  subscription Subscription @relation(fields: [subscription_id], references: [id])

  @@map("subscription_history")
}

model WebsiteUi {
  id             Int     @id @default(autoincrement())
  header_image   String?
  carousel_image Json?

  // school_history      String? @db.LongText
  // history_photo       String
  // history_description String? @db.LongText

  about_school_photo        String?
  bangla_about_school_desc  String? @db.LongText
  english_about_school_desc String? @db.LongText

  english_chairman_name      String?
  bangla_chairman_name       String?
  english_chairman_role_name String?
  bangla_chairman_role_name  String?
  chairman_photo             String?
  english_chairman_speech    String? @db.LongText
  bangla_chairman_speech     String? @db.LongText

  english_principal_name             String?
  bangla_principal_name              String?
  english_principal_role_name        String?
  bangla_principal_role_name         String?
  principal_photo                    String?
  english_principal_speech           String? @db.LongText
  bangla_principal_speech            String? @db.LongText
  english_assist_principal_name      String?
  bangla_assist_principal_name       String?
  english_assist_principal_role_name String?
  bangla_assist_principal_role_name  String?
  assist_principal_photo             String?
  english_assist_principal_speech    String? @db.LongText
  bangla_assist_principal_speech     String? @db.LongText

  form_fill_up_rules_and_regulation String? @db.LongText
  admit_card_rules_and_regulation   String? @db.LongText

  eiin_number   String
  gallery       Json?
  video_gallery Json?

  facebook_link   String? @db.LongText
  youtube_link    String? @db.LongText
  twitter_link    String? @db.LongText
  google_link     String? @db.LongText
  google_map_link String? @db.LongText
  linkedin_link   String? @db.LongText

  e_books_section   Json?
  downloads_section Json?

  school_id Int

  english_scholarship_name       String?
  bangla_scholarship_name        String?
  is_scholarship_active          Boolean @default(false)
  is_branch_wise_fees_collection Boolean @default(false)
  branch_wise_addmission         Boolean @default(false)

  school             School  @relation(fields: [school_id], references: [id])
  scholarshipClasses Class[]

  @@map("website_uis")
}

model SmsTemplate {
  id         Int      @id @default(autoincrement())
  name       String
  body       String
  school_id  Int
  created_at DateTime @default(now())

  school       School         @relation(fields: [school_id], references: [id])
  smsCampaigns SmsCampaigns[]

  @@map("sms_templates")
}

model VoiceTemplate {
  id             Int      @id @default(autoincrement())
  name           String
  voice_url      String
  voice_duration Int
  school_id      Int
  created_at     DateTime @default(now())

  school School @relation(fields: [school_id], references: [id])

  @@map("voice_templates")
}

model SmsGateway {
  id        Int     @id @default(autoincrement())
  title     String
  details   Json
  is_active Boolean
  school_id Int     @unique

  school       School         @relation(fields: [school_id], references: [id])
  smsCampaigns SmsCampaigns[]

  @@map("sms_gateway")
}

model SmsCampaigns {
  id              Int            @id @default(autoincrement())
  name            String
  recipient_type  RecipientType?
  recipient_count Int?
  sms_template_id Int?
  sms_gateway_id  Int
  school_id       Int
  custom_body     String?
  created_at      DateTime       @default(now())

  school      School       @relation(fields: [school_id], references: [id])
  smsTemplate SmsTemplate? @relation(fields: [sms_template_id], references: [id])
  smsGateway  SmsGateway   @relation(fields: [sms_gateway_id], references: [id])
  // smsCampaignDetails SmsCampaignDetails[]

  @@map("sms_campaings")
}

enum RecipientType {
  group
  class
  individual
}

// model SmsCampaignDetails {
//   id            Int        @id @default(autoincrement())
//   name          String
//   campaign_name String
//   body          String
//   phone         String
//   status        SentStatus @default(pending)
//   api_key       String
//   sender_id     String
//   user_id       Int
//   school_id     Int
//   campaign_id   Int
//   created_at    DateTime   @default(now())

//   school      School       @relation(fields: [school_id], references: [id])
//   smsCampaign SmsCampaigns @relation(fields: [campaign_id], references: [id])
//   user        User         @relation(fields: [user_id], references: [id])

//   @@map("sms_campaign_details")
// }

enum SentStatus {
  pending
  success
  failed
}

model EmailTemplate {
  id         Int      @id @default(autoincrement())
  name       String
  body       String
  school_id  Int
  created_at DateTime @default(now())

  school         School           @relation(fields: [school_id], references: [id])
  emailCampaigns EmailCampaigns[]

  @@map("email_templates")
}

model EmailCampaigns {
  id                Int            @id @default(autoincrement())
  name              String
  recipient_type    RecipientType?
  recipient_count   Int?
  email_template_id Int?
  subject           String
  school_id         Int
  custom_body       String?
  created_at        DateTime       @default(now())

  school        School         @relation(fields: [school_id], references: [id])
  emailTemplate EmailTemplate? @relation(fields: [email_template_id], references: [id])

  @@map("email_campaigns")
}

// model EmailCampaignDetails {
//   id          Int        @id @default(autoincrement())
//   campaign_id Int
//   name        String
//   phone       String
//   user_id     Int
//   status      SentStatus
//   created_at  DateTime   @default(now())

//   emailCampaign EmailCampaigns @relation(fields: [campaign_id], references: [id])
//   user          User           @relation(fields: [user_id], references: [id])
//   School        School?        @relation(fields: [schoolId], references: [id])
//   schoolId      Int?

//   @@map("email_campaign_details")
// }

model CertificateTemplate {
  id               Int         @id @default(autoincrement())
  name             String
  user_type        UserType
  page_layout      PageLayouts
  student_qr_code  String?
  employee_qr_code String?
  photo_style      PhotoStyle
  photo_size       Float
  top_space        Float
  bottom_space     Float
  right_space      Float
  left_space       Float
  signature_url    String
  logo_url         String
  background_url   String
  content          Json
  school_id        Int
  created_at       DateTime    @default(now())

  school School @relation(fields: [school_id], references: [id])

  @@map("certificate_templates")
}

enum UserType {
  student
  employee
}

enum PageLayouts {
  a4_potrait
  a4_landscape
}

enum PhotoStyle {
  circular
  rounded
  square
}

model GradingSystem {
  id               Int       @id @default(autoincrement())
  lower_mark       Float
  upper_mark       Float
  point            Float?
  grade            String?
  school_id        Int
  academic_year_id Int
  deleted_at       DateTime?

  school                        School                          @relation(fields: [school_id], references: [id])
  academic_year                 AcademicYear                    @relation(fields: [academic_year_id], references: [id])
  StudentResultDetails          StudentResultDetails[]
  StudentAddtionalResultDetails StudentAddtionalResultDetails[]

  @@map("grade_systems")
}

model Voucher {
  id            Int             @id @default(autoincrement())
  title         String
  description   String
  amount        Float?
  reference     String
  type          TransactionType
  resource_id   Int?
  resource_type String?
  school_id     Int?
  created_at    DateTime        @default(now())

  school      School?       @relation(fields: [school_id], references: [id])
  Transaction Transaction[]

  @@map("vouchers")
}

enum TransactionType {
  debit
  credit
}

model payment_method {
  id         Int    @id @default(autoincrement())
  title      String
  account_id Int

  account     Accounts      @relation(fields: [account_id], references: [id])
  Transaction Transaction[]
  StudentFee  StudentFee[]
}

model Accounts {
  id             Int      @id @default(autoincrement())
  title          String
  account_number String
  description    String   @db.Text
  balance        Float
  school_id      Int
  is_dafault     Boolean  @default(false)
  created_at     DateTime @default(now())

  school                     School                       @relation(fields: [school_id], references: [id])
  Transaction                Transaction[]
  payment_method             payment_method[]
  StudentFee                 StudentFee[]
  Payment_gateway_credential Payment_gateway_credential[]

  @@unique([school_id, title])
  @@map("accounts")
}

model Transaction {
  id                Int     @id @default(autoincrement())
  amount            Float
  transID           String?
  voucher_id        Int
  account_id        Int?
  payment_method_id Int?
  school_id         Int
  tracking_number   String?

  account_name    String?
  acccount_number String?
  payment_method  String?
  voucher_name    String?
  voucher_type    String?
  voucher_amount  Float?

  Ref         String?
  attachment  String?
  description String?
  created_at  DateTime @default(now())

  voucher             Voucher         @relation(fields: [voucher_id], references: [id])
  account             Accounts?       @relation(fields: [account_id], references: [id])
  payment_method_list payment_method? @relation(fields: [payment_method_id], references: [id])
  school              School          @relation(fields: [school_id], references: [id])
  StudentFee          StudentFee?

  // @@unique([tracking_number, school_id])
  @@map("transactions")
}

model Notice {
  id         Int      @id @default(autoincrement())
  title      String
  headLine   String   @db.MediumText
  file_url   String
  school_id  Int
  created_at DateTime @default(now())

  school School @relation(fields: [school_id], references: [id])

  @@map("notices")
}

model Leave {
  id             Int         @id @default(autoincrement())
  user_id        Int
  from_date      DateTime
  to_date        DateTime
  created_at     DateTime    @default(now())
  status         LeaveStatus
  Leave_type     Leave_type
  description    String?
  remarks        String?
  approved_by_id Int?

  approved_by User? @relation("approved_by", fields: [approved_by_id], references: [id])
  user        User  @relation(fields: [user_id], references: [id])
}

enum LeaveStatus {
  pending
  approved
  declined
}

enum Leave_type {
  sick
  casual
  maternity
}

model OnlineAdmission {
  id        Int    @id @default(autoincrement())
  student   Json
  school_id Int
  school    School @relation(fields: [school_id], references: [id])
}

model TeacherRecruitment {
  id        Int    @id @default(autoincrement())
  teacher   Json
  school_id Int
  school    School @relation(fields: [school_id], references: [id])

  @@map("TeacherRecruitment")
}

model Discount {
  id          Int          @id @default(autoincrement())
  discount_id String?
  title       String
  fee_id      Int
  type        DiscountType
  amt         Float
  school_id   Int?
  fee         Fee          @relation(fields: [fee_id], references: [id])
  student     Student[]    @relation("DiscountToStudent")
  school      School?      @relation(fields: [school_id], references: [id])
}

enum DiscountType {
  percent
  flat
}

enum SelectedStatusType {
  all_type
  present
  late
  absence
}

model tbl_student_sent_sms_queue {
  id                  Int                 @id @default(autoincrement())
  class_id            Int
  section_id          Int?
  school_id           Int
  academic_year_id    Int
  sent_sms_std_status SelectedStatusType?
  created_at          DateTime            @default(now())

  class        Class        @relation(fields: [class_id], references: [id])
  sections     Section?     @relation(fields: [section_id], references: [id])
  school       School       @relation(fields: [school_id], references: [id])
  academicYear AcademicYear @relation(fields: [academic_year_id], references: [id])

  @@map("tbl_student_sent_sms_queue")
}

model tbl_attendance_queue {
  id              Int      @id @default(autoincrement())
  school_id       Int
  machine_id      String
  user_id         Int
  status          Int
  submission_time DateTime

  school School @relation(fields: [school_id], references: [id])
  user   User   @relation(fields: [user_id], references: [id])

  @@map("tbl_attendance_queue")
}

model tbl_queued_sms {
  id                  Int       @id @default(autoincrement())
  sms_shoot_id        String // school_id-user_id-dateTime
  school_id           Int
  school_name         String
  user_id             Int
  user_name           String?
  sender_id           Int //sms gateway => id 
  sender_name         String? //sms gateway => json => sender_id 
  contacts            String    @db.LongText
  pushed_via          String
  charges_per_sms     Float     @default(0)
  number_of_sms_parts Int       @default(1)
  total_count         Int
  sms_type            String
  sms_text            String    @db.Text
  submission_time     DateTime?
  status              Int       @default(0) // 0-> new, 1-> paush, 2-> processing, 3-> fails
  sms_gateway_status  String?
  priority            Int       @default(5) // 1-> highest
  // fail_count          Int       @default(0)
  //campaign_id           Int?
  //route_id              Int
  //route_name            String?
  //coverage_id           Int
  //coverage_network_name String?
  //is_dlr_requested      Int       @default(0)
  //is_black_list         Int       @default(0)

  @@unique([id, status])
  @@map("tbl_queued_sms")
}

model tbl_sent_sms {
  id                  Int       @id @default(autoincrement())
  sms_shoot_id        String // school_id-user_id-dateTime
  school_id           Int
  school_name         String
  user_id             Int
  user_name           String?
  sender_id           Int
  sender_name         String?
  contacts            String    @db.LongText
  pushed_via          String
  charges_per_sms     Float     @default(0)
  number_of_sms_parts Int       @default(1)
  total_count         Int
  sms_type            String
  sms_text            String    @db.Text
  submission_time     DateTime?
  status              Int       @default(0) // 0-> new, 1-> paush, 2-> processing, 3-> fails
  sms_gateway_status  String?
  // fail_count          Int       @default(0)
  // priority            Int       @default(5) // 1-> highest
  //campaign_id           Int?
  //route_id              Int
  //route_name            String?
  //coverage_id           Int
  //coverage_network_name String?
  //is_dlr_requested      Int       @default(0)
  //is_black_list         Int       @default(0)

  @@unique([id, status])
  @@map("tbl_sent_sms")
}

model RequestBuySms {
  id                Int                  @id @default(autoincrement())
  masking_count     Int?
  non_masking_count Int?
  document_photo    String
  school_id         Int
  status            RequestPakcageStatus

  school School @relation(fields: [school_id], references: [id])

  @@map("requests_buy_sms")
}

model SmsTransaction {
  id                     Int     @id @default(autoincrement())
  user_id                Int?
  user_name              String?
  masking_count          Int?
  non_masking_count      Int?
  prev_masking_count     Int?
  prev_non_masking_count Int?
  voice_sms_balance      Float?
  prev_voice_sms_balance Float?
  pushed_via             String?
  is_voice               Boolean @default(false)
  school_id              Int

  school School @relation(fields: [school_id], references: [id])

  @@map("sms_transactions")
}

model DailyNote {
  id         Int      @id @default(autoincrement())
  note       String   @db.LongText
  period_id  Int
  subject_id Int
  date       DateTime @db.Date
  created_at DateTime @default(now())

  period  Period  @relation(fields: [period_id], references: [id])
  subject Subject @relation(fields: [subject_id], references: [id])

  @@unique([period_id, date])
  @@map("daily_notes")
}

model Syllabus {
  id               Int @id @default(autoincrement())
  exam_id          Int
  subject_id       Int
  academic_year_id Int

  academicYear     AcademicYear       @relation(fields: [academic_year_id], references: [id])
  subject          Subject            @relation(fields: [subject_id], references: [id])
  exam             Exam               @relation(fields: [exam_id], references: [id])
  Syllabus_details Syllabus_details[]

  @@map("syllabus")
}

model Syllabus_details {
  id          Int    @id @default(autoincrement())
  syllabus_id Int
  body        String @db.MediumText

  syllabus Syllabus @relation(fields: [syllabus_id], references: [id])

  @@map("syllabus_details")
}

model question {
  id              Int         @id @default(autoincrement())
  exam_details_id Int
  content         String?     @db.LongText
  file            String?
  exam_details    ExamDetails @relation(fields: [exam_details_id], references: [id])

  @@map("question")
}

model AddtionalMarkingCategories {
  id         Int       @id @default(autoincrement())
  title      String
  school_id  Int
  created_at DateTime  @default(now())
  deleted_at DateTime?

  school            School              @relation(fields: [school_id], references: [id])
  examAddtionalMark ExamAddtionalMark[]

  @@map("addtional_marking_categories")
}

model ExamAddtionalMark {
  id                Int      @id @default(autoincrement())
  total_mark        Float
  addtional_mark_id Int
  exam_id           Int
  created_at        DateTime @default(now())
  // deleted_at        DateTime

  addtionalMarkingCategorie     AddtionalMarkingCategories      @relation(fields: [addtional_mark_id], references: [id])
  exam                          Exam                            @relation(fields: [exam_id], references: [id])
  StudentAddtionalResultDetails StudentAddtionalResultDetails[]

  @@unique([addtional_mark_id, exam_id])
  @@map("exam_addtional_marks")
}

model StudentAddtionalResultDetails {
  id                     Int               @id @default(autoincrement())
  exam_addtional_mark_id Int
  mark_obtained          Float
  grade_id               Int?
  student_result_id      Int
  created_at             DateTime          @default(now())
  exaxmAddtionalMark     ExamAddtionalMark @relation(fields: [exam_addtional_mark_id], references: [id])
  studentResult          StudentResult     @relation(fields: [student_result_id], references: [id])
  grade                  GradingSystem?    @relation(fields: [grade_id], references: [id])

  @@map("student_addtional_result_details")
}

model Homework {
  id                  Int      @id @default(autoincrement())
  subject_id          Int
  student_id          Int?
  date                DateTime @db.Date
  academic_year_id    Int
  file_path           String?
  description         String?  @db.Text
  youtuble_class_link String?
  live_class_link     String?
  class_id            Int?
  section_id          Int?
  school_id           Int?

  academicYear AcademicYear @relation(fields: [academic_year_id], references: [id])
  subject      Subject      @relation(fields: [subject_id], references: [id])
  student      Student?     @relation(fields: [student_id], references: [id])
  class        Class?       @relation(fields: [class_id], references: [id])
  section      Section?     @relation(fields: [section_id], references: [id])
  school       School?      @relation(fields: [school_id], references: [id])

  @@map("homework")
}

model session_store {
  paymentID  String   @id
  token      String   @db.MediumText
  user_id    Int
  created_at DateTime
  data       Json

  @@map("session_store")
}

model Banners {
  id      Int  @id @default(autoincrement())
  banners Json
  user_id Int

  user User @relation(fields: [user_id], references: [id])

  @@map("banners")
}

model StudentAdmissionForm {
  id        Int    @id @default(autoincrement())
  file_url  String
  school_id Int    @unique

  school School @relation(fields: [school_id], references: [id])

  @@map("student_admission_forms")
}

model Payment_gateway_credential {
  id         Int                   @id @default(autoincrement())
  title      payment_gateway_title
  details    Json
  is_active  Boolean
  school_id  Int
  account_id Int

  account Accounts @relation(fields: [account_id], references: [id])
  school  School   @relation(fields: [school_id], references: [id])

  @@unique([title, school_id])
  @@map("payment_gateway_credential")
}

enum payment_gateway_title {
  bkash
  nagad
  nexus
  amarPay
  surjoPay
  sslcommerz
}

enum use_system_type_enum {
  automatic
  external_api
}

enum body_format {
  text
  unicode
}

enum default_sms_template_enum {
  present
  late
  absence
}

model AutoAttendanceSentSms {
  id                      Int          @id @default(autoincrement())
  // body                  String?
  // body_format           body_format
  present_body            String?
  present_body_format     body_format?
  late_body               String?
  late_body_format        body_format?
  absence_body            String?
  absence_body_format     body_format?
  admission_body          String?
  admission_body_format   body_format?
  every_hit               Boolean      @default(false)
  external_api_info       Json?
  is_attendence_active    Boolean      @default(false)
  is_sms_active           Boolean      @default(false)
  is_present_sms_active   Boolean      @default(false)
  is_late_sms_active      Boolean      @default(false)
  is_absence_sms_active   Boolean      @default(false)
  is_admission_sms_active Boolean      @default(false)
  updated_by              Json?        @default("[]")

  default_sms_template default_sms_template_enum @default(present)
  use_system_type      use_system_type_enum      @default(automatic)
  school_id            Int                       @unique

  school School @relation(fields: [school_id], references: [id])

  @@map("auto_attendance_sent_sms")
}

model SmsSettings {
  id                            Int     @id @default(autoincrement())
  fees_collection_sms_body      String?
  is_fees_collection_sms_active Boolean @default(false)
  school_id                     Int     @unique

  updated_by Json?     @default("[]")
  created_at DateTime  @default(now())
  updated_at DateTime?

  school School @relation(fields: [school_id], references: [id])

  @@map("sms_settings")
}

// model StdSentSmsSettings {
//   id                    Int          @id @default(autoincrement())
//   present_body          String?
//   present_body_format   body_format?
//   late_body             String?
//   late_body_format      body_format?
//   leave_body            String?
//   leave_body_format     body_format?
//   admission_body        String?
//   admission_body_format body_format?
//   is_active             Boolean      @default(false)
//   every_hit             Boolean      @default(false)
//   external_api_info     Json?

//   default_attendance_sms_template default_sms_template_enum @default(present)
//   use_system_type                 use_system_type_enum      @default(automatic)
//   school_id                       Int                       @unique

//   school School @relation(fields: [school_id], references: [id])

//   @@map("std_sent_sms_settings")
// }

model OtherUsersInfo {
  id                Int       @id @default(autoincrement())
  first_name        String
  middle_name       String?
  last_name         String?
  national_id       String?
  phone             String?
  email             String?
  gender            Gender
  blood_group       String?   @db.VarChar(20)
  religion          String?
  date_of_birth     DateTime  @db.Date
  present_address   String
  permanent_address String
  joining_date      DateTime  @db.Date
  resume            String?
  photo             String?
  deleted_at        DateTime?

  employee_id String?
  user_id     Int     @unique
  school_id   Int

  user   User   @relation(fields: [user_id], references: [id])
  school School @relation(fields: [school_id], references: [id])

  @@map("other_users_info")
}

model VoiceGateway {
  id        Int    @id @default(autoincrement())
  title     String
  details   Json
  // is_active Boolean
  school_id Int    @unique

  school School @relation(fields: [school_id], references: [id])

  @@map("voice_gateways")
}

model tbl_sent_voice_sms {
  id                Int             @id @default(autoincrement())
  message_id        String          @unique
  send_by_user_id   Int
  send_by_user_name String
  status            Int             @default(0) // 0-> new, 1-> paush, 2-> processing, 3-> fails
  voice_url         String
  contacts          String          @db.LongText
  sender_id         String
  // is_masking        Boolean
  pushed_via        pushed_via_enum
  school_id         Int

  voice_duration       Int   @default(0) // seconds
  pulse_size           Int   @default(0)
  charges_per_pulses   Float @default(0)
  number_of_sms_pulses Int   @default(1)
  total_count          Int   @default(0)

  logs       String?
  created_at DateTime  @default(now())
  updated_at DateTime?

  @@map("tbl_sent_voice_sms")
}

enum pushed_via_enum {
  voice_recipient
  group_contact
  file_upload
}

model tbl_schools_transactions {
  id                   Int     @id @default(autoincrement())
  school_id            Int
  school_name          String
  updated_by_user_id   Int?
  updated_by_user_name String?

  main_balance      Float?
  prev_main_balance Float?

  masking_sms_count      Int?
  prev_masking_sms_count Int?

  non_masking_sms_count      Int?
  prev_non_masking_sms_count Int?

  masking_sms_price      Float?
  prev_masking_sms_price Float?

  non_masking_sms_price      Float?
  prev_non_masking_sms_price Float?

  voice_sms_balance      Float?
  prev_voice_sms_balance Float?

  voice_sms_price      Float?
  prev_voice_sms_price Float?

  voice_pulse_size      Int?
  prev_voice_pulse_size Int?

  total_answered Int?

  created_at DateTime @default(now())

  @@map("tbl_schools_transactions")
}

enum TeacherPayType {
  percentage
  flat
}

model studentFeeWiseTeacherPay {
  id                Int            @id @default(autoincrement())
  student_fee_id    Int            @unique
  subject_id        Int
  teacher_pay_type  TeacherPayType
  teacher_id        Int
  school_id         Int
  amount            Float
  collection_date   DateTime
  created_at        DateTime       @default(now())
  percentage_amount Int
  fixed_amount      Int

  studentFee StudentFee? @relation(fields: [student_fee_id], references: [id])
  school     School      @relation(fields: [school_id], references: [id])
  teacher    Teacher     @relation(fields: [teacher_id], references: [id])
  subject    Subject     @relation(fields: [subject_id], references: [id])

  @@map("student_fee_wise_teacher_pays")
}

enum PaymentType {
  percentage
  flat
}

model TeacherSalaryStructure {
  id                Int         @id @default(autoincrement())
  teacher_id        Int
  school_id         Int
  section_id        Int
  subject_id        Int
  class_id          Int
  payment_type      PaymentType
  percentage_amount Int?
  fixed_amount      Int?
  deleted_at        DateTime?

  teacher Teacher @relation(fields: [teacher_id], references: [id])
  school  School  @relation(fields: [school_id], references: [id])
  section Section @relation(fields: [section_id], references: [id])
  subject Subject @relation(fields: [subject_id], references: [id])
  class   Class   @relation(fields: [class_id], references: [id])

  @@map("teacher_salary_structure")
}

enum attendenceInfoTypeEnum {
  automatic
  external_api
}

model attendence_info {
  id         Int                    @id @default(autoincrement())
  body       Json?
  school_id  Int
  type       attendenceInfoTypeEnum
  created_at DateTime               @default(now())

  @@map("attendence_info")
}

enum WebsiteMenuStatus {
  publish
  unpublish
}

model WebsiteMenu {
  id              Int               @id @default(autoincrement())
  parent_id       Int?
  english_title   String
  bangla_title    String?
  link_type       String
  website_link    String
  status          WebsiteMenuStatus @default(publish)
  dynamic_page_id Int?
  school_id       Int

  websiteDynamicPage WebsiteDynamicPage? @relation(fields: [dynamic_page_id], references: [id])
  school             School              @relation(fields: [school_id], references: [id])
  parent             WebsiteMenu?        @relation("WebsiteMenus", fields: [parent_id], references: [id])
  subcategories      WebsiteMenu[]       @relation("WebsiteMenus")

  @@map("website_menus")
}

enum WebsiteDynamicPageStatus {
  publish
  unpublish
}

model WebsiteDynamicPage {
  id                  Int                      @id @default(autoincrement())
  english_title       String
  bangla_title        String
  english_description Json
  bangla_description  Json
  feature_photo       String?
  status              WebsiteDynamicPageStatus
  school_id           Int
  school              School                   @relation(fields: [school_id], references: [id])
  WebsiteMenu         WebsiteMenu[]

  @@map("website_dynamic_pages")
}

model Program {
  id           Int     @id @default(autoincrement())
  title        String
  banner_photo String?
  body         Json
  school_id    Int
  school       School  @relation(fields: [school_id], references: [id])

  @@map("programs")
}

model TeacherShift {
  id           Int       @id @default(autoincrement())
  title        String
  entry_time   DateTime? @db.Time()
  late_time    DateTime? @db.Time()
  absence_time DateTime? @db.Time()
  exit_time    DateTime? @db.Time()
  school_id    Int

  school  School    @relation(fields: [school_id], references: [id])
  teacher Teacher[]

  @@map("teacher_shifts")
}
